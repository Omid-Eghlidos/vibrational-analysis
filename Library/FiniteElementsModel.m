classdef FiniteElementsModel
    properties (Access = public)
        % Total nodes cartesian coordinates (X, Y, Z)
        X = []; Y = []; Z = [];
        % Total nodes' numbers (nnt) and their degrees of freedom (ut)
        nnt = []; ut = [];
        % Ground nodes' numbers (nng) and their degrees of freedom (ug)
        nng = []; ug = [];
        % Free nodes' numbers (nnf) and their degrees of freedom (uf)
        nnf = []; uf = [];
        % Complete matrices and vector of equation of motion (EoM: Ma + Cv + Kx = F)
        % and their separate partitions after applying boundary conditions
        % resulting in ground (g) and free (f) nodes
        % Mass matrix (M) and its partitions
        M = []; Mgg = []; Mgf = []; Mfg = []; Mff = [];
        % Stiffness matrix (K) and its partitions
        K = []; Kgg = []; Kgf = []; Kfg = []; Kff = [];
        % Rayleigh damping matrix (C) and its partitions
        C = []; Cgg = []; Cgf = []; Cfg = []; Cff = [];
        % Force vector (F) and its partitions
        F = []; Fg = []; Ff = [];
    end

    methods (Access = public)
        function obj = FiniteElementsModel(params)
            disp('---- Finite elements model');
            % Initialize and separate nodes for boundary/ground and free nodes
            obj = obj.separateGroundAndFreeNodes(params);

            % Read FE mesh parameters from output4 format files generated by NASTRAN
            % Read unrestrained finite element mass matrix (M)
            obj.M = nastranOutputReader('mgg.dat');
            % Read unrestrained finite element stiffness matrix (K)
            obj.K = nastranOutputReader('kgg.dat');

            % Apply the boundary conditions and partition the matrices
            obj = obj.applyBoundaryConditions(params);
        end
    end

    methods (Access = private)
        function obj = separateGroundAndFreeNodes(obj, params)
            % Separate and initialize node numbers, DoFs, coordinates for
            % boundary/ground (g) and free (f) nodes
            % All the nodes cartesian coordinates
            obj.X = params.nodes_coord(:,2);
            obj.Y = params.nodes_coord(:,3);
            obj.Z = params.nodes_coord(:,4);

            % Total nodes numbers (nnt) and their DoFs (ut)
            obj.nnt = params.nodes_coord(:,1);
            obj.ut = reshape(repmat((obj.nnt(:) - 1) * 6, 1, 6)' + (1:6)', [], 1);

            % Ground nodes' number (nng) and their DoFs (ug)
            obj.nng = params.ground_nodes;
            obj.ug = reshape(repmat((obj.nng(:) - 1) * 6, 1, 6)' + (1:6)', [], 1);

            % Free nodes' number (nnf) and their DoFs (uf)
            obj.nnf = setdiff(obj.nnt, obj.nng);
            obj.uf = reshape(repmat((obj.nnf(:) - 1) * 6, 1, 6)' + (1:6)', [], 1);
        end

        function obj = applyBoundaryConditions(obj, params)
            % Apply boundary conditions and separate mass (M), stiffness (K), Reyleigh
            % damping (C) matrices and force vector (F) for fixed/ground and free nodes
            disp('------ Applying boundary conditions');
            % Finding the mass matrices Mgg, Mgf, Mfg, Mff
            obj.Mgg = obj.M(obj.ug, obj.ug);
            obj.Mgf = obj.M(obj.ug, obj.uf);
            obj.Mfg = obj.M(obj.uf, obj.ug);
            obj.Mff = obj.M(obj.uf, obj.uf);
            % Finding stiffness matrices Kgg, Kgf, Kfg, Kff
            obj.Kgg = obj.K(obj.ug, obj.ug);
            obj.Kgf = obj.K(obj.ug, obj.uf);
            obj.Kfg = obj.K(obj.uf, obj.ug);
            obj.Kff = obj.K(obj.uf, obj.uf);
            % Defining the damping matrix C using Rayleigh damping
            obj.Cgg = params.alpha * obj.Mgg + params.beta * obj.Kgg;
            obj.Cgf = params.alpha * obj.Mgf + params.beta * obj.Kgf;
            obj.Cfg = params.alpha * obj.Mfg + params.beta * obj.Kfg;
            obj.Cff = params.alpha * obj.Mff + params.beta * obj.Kff;
            obj.C = [obj.Cgg, obj.Cgf; obj.Cfg, obj.Cff];
            % Finding forces of the grounded and free nodes
            obj.Fg = zeros(length(obj.ug), 1);
            obj.Ff = zeros(length(obj.uf), 1);
            obj.F = [obj.Fg; obj.Ff];
        end
    end
end
